{"version":3,"sources":["Hooks/useMoneda.js","Hooks/useCriptomoneda.js","components/Error.js","components/Formularios.js","components/Header.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["useMoneda","label","stateInicial","opciones","useState","state","actualizarState","mostrar","guardarMostrar","seleccionrP","cls","className","onClick","map","opcion","key","codigo","src","imagen","alt","nombre","useCriptomoneda","stateCripto","actualizarStateCripto","CoinInfo","Id","Internal","ImageUrl","FullName","MensajeError","styled","p","Error","mensaje","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarListacripto","error","guardarError","moneda","SeleccionarMoneda","criptomoneda","SeleccionarCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","e","preventDefault","type","value","ContHeader","div","Heading","h1","Parrafo","Header","titulo","descripcion","fechas","ResultadoDiv","ContResult","Info","Precio","Cotizacion","Object","keys","length","IMAGEURL","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","Contenedor","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","console","log","cotizarCriptomoneda","componente","dateProj","Date","dateString","getFullYear","getMonth","getDate","Formularios","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.396e1786.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport './hooks.css';\r\n\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n\r\n    const [state, actualizarState] = useState(stateInicial);\r\n    const [mostrar, guardarMostrar] = useState(false);\r\n\r\n    const seleccionrP = cls =>{\r\n        actualizarState(cls);\r\n        if(!mostrar){\r\n            guardarMostrar(true);\r\n            return;\r\n        }\r\n        guardarMostrar(false);\r\n    }\r\n\r\n    const Seleccionar = () => (\r\n        <Fragment>\r\n            <ul className={!mostrar ? 'SelectData indexPosUP nonVisibleTag' : 'SelectData indexPosUP'}>\r\n                <li\r\n                    onClick={() => seleccionrP('')}\r\n                    className={state === '' || mostrar ? 'uno' : 'nonActive'}\r\n                >\r\n                    <p className=\"sel\">Seleccione la Moneda</p>\r\n                </li>\r\n\r\n                <div className=\"ContenedorSelect\">\r\n                    {opciones.map(opcion => (\r\n                        <li \r\n                            key={opcion.codigo}\r\n                            onClick={() => seleccionrP(opcion.codigo)}\r\n                            className={state === opcion.codigo || mostrar ? opcion.codigo : 'nonActive'}\r\n                        >\r\n                            <img src={opcion.imagen} alt=\"dart\" />\r\n                            <p>({opcion.codigo}) {opcion.nombre}</p>\r\n                        </li>\r\n                    ))}\r\n                </div>\r\n            </ul> \r\n        </Fragment>\r\n    );\r\n    return [state, Seleccionar, actualizarState];\r\n}\r\n \r\nexport default useMoneda;","import React, {Fragment, useState} from 'react';\r\nimport './hooks.css';\r\n\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n\r\n    const [stateCripto, actualizarStateCripto] = useState(stateInicial);\r\n    const [mostrar, guardarMostrar] = useState(false);\r\n    let urlAp = 'https://www.cryptocompare.com';\r\n\r\n    const seleccionrP = cls =>{\r\n        actualizarStateCripto(cls);\r\n        if(!mostrar){\r\n            guardarMostrar(true);\r\n            return;\r\n        }\r\n        guardarMostrar(false);\r\n    }\r\n  \r\n    const SeleccionarCripto = () => (\r\n        <Fragment>\r\n            <ul className={!mostrar ? 'SelectData indexPosDOWN nonVisibleTag' : 'SelectData indexPosDOWN'}>\r\n                <li\r\n                    onClick={() => seleccionrP('')}\r\n                    className={stateCripto === '' || mostrar ? 'uno' : 'nonActive'}\r\n                >\r\n                    <p className=\"sel\">Seleccione la Criptomoneda</p>\r\n                </li>\r\n            \r\n                <div className=\"ContenedorSelect\">\r\n                    {opciones.map(opcion => (\r\n                        <li \r\n                            key={opcion.CoinInfo.Id}\r\n                            onClick={() => seleccionrP(opcion.CoinInfo.Internal)}\r\n                            className={stateCripto === opcion.CoinInfo.Internal || mostrar ? opcion.CoinInfo.Internal : 'nonActive'}\r\n                        >\r\n                            <img src={urlAp + opcion.CoinInfo.ImageUrl} alt=\"dart\" />\r\n                            <p>({opcion.CoinInfo.Internal}) {opcion.CoinInfo.FullName}</p>\r\n                        </li>\r\n                    ))}\r\n                </div>\r\n               \r\n            </ul>\r\n        </Fragment>\r\n    );\r\n    return [stateCripto, SeleccionarCripto , actualizarStateCripto];\r\n}\r\n \r\nexport default useCriptomoneda;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MensajeError = styled.p`\r\n    color: #ff0000a1;\r\n    font-size: 14px;\r\n    font-weight: bolder;\r\n    text-align: center;\r\n    font-family: 'Questrial', sans-serif;\r\n    &::after {\r\n        content: '';\r\n        width: 70%;\r\n        height: 1px;\r\n        background-color: #ff0000a1;\r\n        display:block;\r\n        margin: 0 auto;\r\n    }\r\n`;\r\n\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <MensajeError>\r\n            {mensaje}\r\n        </MensajeError>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, {useEffect, useState} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useMoneda from '../Hooks/useMoneda';\r\nimport useCriptomoneda from '../Hooks/useCriptomoneda';\r\nimport axios from 'axios';\r\nimport Error from './Error';\r\n\r\nconst Boton = styled.input`\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #395EA5;\r\n    border: none;\r\n    width: 60%;\r\n    margin: 20px auto 0 auto;\r\n    border-radius: 6px;\r\n    color: #FFF;\r\n    transition: background-color .3s ease;\r\n    box-shadow: 2px 2px 20px 1px #395EA5;\r\n    &:hover {\r\n        background-color: #326AC0;\r\n        cursor:pointer;\r\n    }\r\n`;\r\n\r\nconst Formulario = ({guardarMoneda, guardarCriptomoneda}) => {\r\n\r\n    const [listacripto, guardarListacripto] = useState([]);\r\n\r\n    const [error , guardarError] = useState(false);\r\n\r\n    const monedas = [\r\n        {imagen: 'https://image.flaticon.com/icons/svg/555/555526.svg', codigo: 'USD', nombre: 'Dolar de Estados Unidos'},\r\n        {imagen: 'https://image.flaticon.com/icons/svg/206/206600.svg', codigo: 'MXN', nombre: 'Peso Mexicano'},\r\n        {imagen: 'https://image.flaticon.com/icons/svg/206/206593.svg', codigo: 'EUR', nombre: 'Euro'},\r\n        {imagen: 'https://image.flaticon.com/icons/svg/555/555417.svg', codigo: 'GBP', nombre: 'Libra Esterlina'}\r\n    ];\r\n\r\n    const [moneda, SeleccionarMoneda] = useMoneda('Elige tu moneda','', monedas);\r\n    const [criptomoneda, SeleccionarCripto] = useCriptomoneda('Elige tu criptomoneda','', listacripto);\r\n\r\n    //pedir datos de api\r\n    useEffect(()=> {\r\n        const consultarAPI = async() => {\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n            const resultado = await axios.get(url);\r\n            guardarListacripto(resultado.data.Data);\r\n        }\r\n        consultarAPI();\r\n    },[]);\r\n\r\n    const cotizarMoneda = e =>{\r\n        e.preventDefault();\r\n\r\n        if(moneda === '' || criptomoneda === '' ){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        guardarError(false);\r\n        guardarMoneda(moneda);\r\n        guardarCriptomoneda(criptomoneda);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={cotizarMoneda}\r\n        >\r\n            {error ? <Error mensaje='*Todos los campos son obligatorios.' /> : null}\r\n            <SeleccionarMoneda />\r\n            <SeleccionarCripto />\r\n            <Boton\r\n                type=\"submit\"\r\n                value=\"Calcular\"\r\n            />\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport styled from '@emotion/styled'\r\n\r\nconst ContHeader =styled.div`\r\n    margin-bottom: 40px;\r\n    margin-top: 80px;\r\n`;\r\nconst Heading = styled.h1`\r\n    font-family: 'Questrial', sans-serif;\r\n    color: #2A3C46;\r\n    text-align: center;\r\n    font-weight: bolder;\r\n    font-size: 24px;\r\n    margin-bottom: 30px;\r\n    &:after{\r\n        content: '';\r\n        width: 100%;\r\n        height: 1px;\r\n        display: block;\r\n        background-color: rgba(0,0,0,0.2);\r\n        margin-top: 30px;\r\n    }\r\n`;\r\nconst Parrafo = styled.p`\r\n    font-family: 'Roboto', sans-serif;\r\n    color: rgba(0,0,0,0.5);\r\n    text-align: left;\r\n    font-size: 13px;\r\n    margin:0 ;\r\n    padding: 0;\r\n    line-height: 18px;\r\n    span{\r\n        color: rgba(0,0,0,0.8);\r\n    }\r\n`;\r\n\r\nconst Header = ({titulo, descripcion, fechas}) => {\r\n    return (\r\n        <ContHeader>\r\n            <Heading>{titulo}</Heading> \r\n            <Parrafo>{descripcion} <span>{fechas}</span></Parrafo>\r\n        </ContHeader>\r\n     );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Header from './Header';\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    p{\r\n        color: #888;\r\n    }\r\n`;\r\nconst ContResult = styled.div`\r\n    background-color: #FFF;\r\n    border-radius: 8px;\r\n    box-shadow: 0 0 10px 0 rgba(0,0,0,0.02);\r\n    padding: 10px 40px;\r\n    .resumenHeader{\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        div{\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n            div{\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n            img{\r\n                width: 70px;\r\n                height: 70px;\r\n                margin-right: 10px;\r\n            }\r\n            span{\r\n                display: block;\r\n                width: 20px;\r\n                height: 10px;\r\n                margin: 5px auto;\r\n                &:after{\r\n                    content: '';\r\n                    border-right: 10px solid transparent;\r\n                    border-top: 10px solid #395EA5;\r\n                    border-left: 10px solid transparent;\r\n                    border-bottom: 0 solid transparent;\r\n                    position: absolute\r\n                }\r\n            }\r\n            p{\r\n                margin: 0;\r\n                text-align: center;\r\n                font-weight: bolder;\r\n            }\r\n        }\r\n    }\r\n`;\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n`;\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n`;\r\n\r\nconst Cotizacion = ({resultado,criptomoneda, moneda}) => {\r\n    if(Object.keys(resultado).length === 0) return null;\r\n    let urlAp = 'https://www.cryptocompare.com';\r\n    return ( \r\n        <ResultadoDiv>\r\n            <Header \r\n                titulo=\"Información de Cotización\"\r\n                descripcion=''\r\n                fechas=''\r\n            />\r\n            <ContResult>\r\n                <div className=\"resumenHeader\">\r\n                    <p>Resumen</p>\r\n                    <div>\r\n                        <img src={urlAp + resultado.IMAGEURL} alt={criptomoneda} />\r\n                        <div>\r\n                            <p>{criptomoneda}</p>\r\n                            <span></span>\r\n                            <p>{moneda}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Precio>El precio es: <span>{resultado.PRICE}</span> </Precio>\r\n                <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span> </Info>\r\n                <Info>Precio más bajo del día: <span>{resultado.LOWDAY}</span> </Info>\r\n                <Info>Variación últimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span> </Info>\r\n                <Info>Última Actualización: <span>{resultado.LASTUPDATE}</span> </Info>\r\n            </ContResult>\r\n        </ResultadoDiv>\r\n     );\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"sk-chase\">\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, {useState, useEffect } from 'react';\nimport Formularios from './components/Formularios';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\nimport Header from './components/Header';\nimport styled from '@emotion/styled'\nimport axios from 'axios';\n\nconst Contenedor = styled.div`\n  max-width: 1000px;\n  margin: 0 auto;\n  @media (min-width: 992px){\n    display: grid;\n    grid-template-columns: repeat( 2, 1fr);\n    column-gap: 2rem;\n  }\n  .contForm{\n    padding: 0 20px;\n  }\n`;\n\nfunction App() {\n\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guardarCriptomoneda] = useState('');\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n\n    const cotizarCriptomoneda = async() => {\n      if(moneda === '') return;\n\n      const url =`https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n      const resultado = await axios.get(url);\n      guardarCargando(true);\n      //console.log(resultado.data.DISPLAY[criptomoneda][moneda]);\n      setTimeout( () => {\n        guardarCargando(false);\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n        console.log(resultado.data.DISPLAY[criptomoneda][moneda]);\n        console.log(criptomoneda);\n        console.log(moneda);\n      },3000);\n    }\n    cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  const componente = (cargando) ? <Spinner />: <Cotizacion resultado={resultado} criptomoneda={criptomoneda} moneda={moneda} />\n  const dateProj = new Date();\n  const dateString = `${dateProj.getFullYear()}.${dateProj.getMonth()+1}.${dateProj.getDate()}`\n  return (\n    <Contenedor>\n      <div className=\"contForm\">\n        <Header \n          titulo=\"Cotizador de Criptomonedas\"\n          descripcion='Basado en el tipo de cambio de Cryptocompare a la fecha de hoy'\n          fechas={dateString}\n        />\n        <Formularios \n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n      </div>\n      <div>\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}